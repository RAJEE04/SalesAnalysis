# -*- coding: utf-8 -*-
"""PROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qupk0S8dXHpghdDa445knZ00twolOMfK
"""

!pip install streamlit -q

# Commented out IPython magic to ensure Python compatibility.
# %%writefile sales_by_product.py
# import streamlit as st
# import numpy as np
# import pandas as pd
# import matplotlib.pyplot as plt
# import seaborn as sns
# import plotly.express as px
# 
# st.set_page_config(page_title="Profitability Dashboard",
#                    page_icon=":chart_with_upwards_trend:", layout="wide")
# 
# 
# df = pd.read_csv("/content/drive/MyDrive/BAP23/DATASET23/supermarket_sales - Sheet1.csv")
# 
# st.markdown("""
# <style>
# body {
#     background-color: #000000;
#     color: #ffffff;
# }
# </style>
# """, unsafe_allow_html=True)
# 
# st.sidebar.header("Filters")
# city = st.sidebar.multiselect(
#     "Pick a city : ", options=df["City"].unique(), default=df["City"].unique())
# customer = st.sidebar.multiselect(
#     "Customer type : ", options=df["Customer_type"].unique(), default=df["Customer_type"].unique())
# product = st.sidebar.multiselect(
#     "Product line : ", options=df["Product_line"].unique(), default=df["Product_line"].unique())
# customerGender = st.sidebar.multiselect(
#     "Gender : ", options=df["Gender"].unique(), default=df["Gender"].unique())
# 
# df_selection = df.query(
#     "City == @city & Customer_type == @customer & Product_line == @product & Gender == @customerGender")
# 
# st.title(":chart_with_upwards_trend: Profitability Analysis Dashboard ")
# st.markdown("##")
# st.image('https://entail-assets.com/beprofit/Calculating%20profit%20margins-1633788391383.jpg', caption='Profit Analysis')
# 
# total = round(df_selection["Total"].sum())
# avg_sale_transc = round(df_selection["Total"].mean())
# avg_rating = round(df_selection["Rating"].mean(), 1)
# starRating = ":star:" * int(round(avg_rating, 0))
# 
# left, middle, right = st.columns(3)
# with left:
#     st.subheader("Total Sales : ")
#     st.subheader(f"US $ {total:,}")
# with middle:
#     st.subheader("Average Rating :")
#     st.subheader(f"{avg_rating} {starRating}")
# with right:
#     st.subheader("Average sales per transaction :")
#     st.subheader(f"US $ {avg_sale_transc}")
# 
# st.markdown("---")
# 
# # Payment Type
# payment_method_type = df_selection.groupby(by=["Payment"]).sum()["Total"].reset_index()
# fig_payment = px.bar(payment_method_type, x="Total", y="Payment", orientation="h",
#                      template="plotly_dark", title="<b>Payment Type<b>", color_discrete_sequence=px.colors.sequential.Viridis)
# 
# # Gender Pie Chart
# gender_counts = df["Gender"].value_counts().reset_index()
# gender_counts.columns = ["Gender", "Count"]
# fig_gender = px.pie(gender_counts, values="Count", names="Gender", title="Overall Gender Ratio", color_discrete_sequence=px.colors.sequential.Viridis)
# 
# st.plotly_chart(fig_payment)
# st.plotly_chart(fig_gender)
# 
# 
# # Calculate profitability using gross margin percentage
# df_selection['Profitability'] = df_selection['Total'] * (df_selection['gross margin percentage'] / 100)
# 
# # Profitability by Product Line
# profit_by_product_line = df_selection.groupby('Product_line')['Profitability'].sum().reset_index()
# 
# # Profitability by City
# profit_by_city = df_selection.groupby('City')['Profitability'].sum().reset_index()
# 
# # Profitability by Customer Type
# profit_by_customer_type = df_selection.groupby('Customer_type')['Profitability'].sum().reset_index()
# 
# # Bar plot using Seaborn with Viridis color palette
# fig, axes = plt.subplots(3, 1, figsize=(10, 18))
# sns.barplot(data=profit_by_product_line, x='Profitability', y='Product_line', ax=axes[0], palette='viridis')
# sns.barplot(data=profit_by_city, x='Profitability', y='City', ax=axes[1], palette='viridis')
# sns.barplot(data=profit_by_customer_type, x='Profitability', y='Customer_type', ax=axes[2], palette='viridis')
# 
# axes[0].set_title('Profitability by Product Line')
# axes[1].set_title('Profitability by City')
# axes[2].set_title('Profitability by Customer Type')
# 
# # Adjusting spacing
# plt.subplots_adjust(hspace=0.5)
# 
# st.pyplot(fig)
# 
# # Heatmap for Profitability
# heatmap_data = df_selection.pivot_table(index='Product_line', columns='City', values='Profitability', aggfunc='sum')
# plt.figure(figsize=(10, 8))
# sns.heatmap(heatmap_data, cmap='viridis', annot=True, fmt=".1f", linewidths=0.5)
# plt.title('Profitability Heatmap')
# plt.xlabel('City')
# plt.ylabel('Product Line')
# st.pyplot()
# 
# 
# # Hiding Streamlit contents
# hide_st_style = """
# <style>
# #MainMenu{visibility:hidden;}
# footer{visibility:hidden;}
# header{visibility:hidden;}
# </style>
# """
# 
# st.markdown(hide_st_style, unsafe_allow_html=True)
# 
# 
#

!wget -q -O - ipv4.icanhazip.com

! streamlit run sales_by_product.py & npx localtunnel --port 8501